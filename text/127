class Solution {

    private HashSet<String> set;

    public int ladderLength(String beginWord, String endWord, 
            List<String> wordList) {
        
        System.out.println(beginWord + ", " + endWord);

        if (beginWord.equals(endWord) || beginWord.length() != endWord.length()
                || wordList.contains(endWord))
            return 0;
        if (set == null)
            set = new HashSet<>();
        if (set.contains(beginWord)) {
            return Integer.MAX_VALUE;
        }
        set.add(beginWord);

        List<String> nextBeginWord = new LinkedList<>();    //  保存下一步的beginWord
        for (String string : wordList) {
            int cnt = 0;
            char[] c1 = string.toCharArray(), c2 = beginWord.toCharArray();
            if (c1.length != c2.length)
                return Integer.MAX_VALUE;
            for (int i = 0; i < c1.length; i++) {
                if (c1[i] != c2[i]) {
                    cnt++;
                }
            }
            if (cnt == 1) {
                nextBeginWord.add(string);
                System.out.println("nextResultWord.add( " + string + ")");
            }
        }
        LinkedList<Integer> nextResult = new LinkedList<>();
        for (String s : nextBeginWord) {
            nextResult.add(ladderLength(s, endWord, wordList) + 1);
        }
        int min = 0;
        for (Integer x : nextResult) {
            if (x < min)
                min = x;
        }
        return min;
        
    }
}